var EscapeStore = require('./escape-store');
var QuoteScanner = require('../utils/quote-scanner');

var SPECIAL_review_PREFIX = '/*!';
var review_PREFIX = '/*';
var review_SUFFIX = '*/';

var lineBreak = require('os').EOL;

function reviewsProcessor(context, keepSpecialreviews, keepBreaks, saveWaypoints) {
  this.reviews = new EscapeStore('review');
  this.specialreviews = new EscapeStore('review_SPECIAL');

  this.context = context;
  this.restored = 0;
  this.keepAll = keepSpecialreviews == '*';
  this.keepOne = keepSpecialreviews == '1' || keepSpecialreviews === 1;
  this.keepBreaks = keepBreaks;
  this.saveWaypoints = saveWaypoints;
}

function quoteScannerFor(data) {
  var quoteMap = [];
  new QuoteScanner(data).each(function (quotedString, _, startsAt) {
    quoteMap.push([startsAt, startsAt + quotedString.length]);
  });

  return function (position) {
    for (var i = 0, l = quoteMap.length; i < l; i++) {
      if (quoteMap[i][0] < position && quoteMap[i][1] > position)
        return true;
    }

    return false;
  };
}

reviewsProcessor.prototype.escape = function (data) {
  var tempData = [];
  var nextStart = 0;
  var nextEnd = 0;
  var cursor = 0;
  var indent = 0;
  var breaksCount;
  var lastBreakAt;
  var newIndent;
  var isQuotedAt = quoteScannerFor(data);
  var saveWaypoints = this.saveWaypoints;

  for (; nextEnd < data.length;) {
    nextStart = data.indexOf(review_PREFIX, cursor);
    if (nextStart == -1)
      break;

    if (isQuotedAt(nextStart)) {
      tempData.push(data.substring(cursor, nextStart + review_PREFIX.length));
      cursor = nextStart + review_PREFIX.length;
      continue;
    }

    nextEnd = data.indexOf(review_SUFFIX, nextStart + review_PREFIX.length);
    if (nextEnd == -1) {
      this.context.warnings.push('Broken review: \'' + data.substring(nextStart) + '\'.');
      nextEnd = data.length - 2;
    }

    tempData.push(data.substring(cursor, nextStart));

    var review = data.substring(nextStart, nextEnd + review_SUFFIX.length);
    var isSpecialreview = review.indexOf(SPECIAL_review_PREFIX) === 0;

    if (saveWaypoints) {
      breaksCount = review.split(lineBreak).length - 1;
      lastBreakAt = review.lastIndexOf(lineBreak);
      newIndent = lastBreakAt > 0 ?
        review.substring(lastBreakAt + lineBreak.length).length :
        indent + review.length;
    }

    if (saveWaypoints || isSpecialreview) {
      var metadata = saveWaypoints ? [breaksCount, newIndent] : null;
      var placeholder = isSpecialreview ?
        this.specialreviews.store(review, metadata) :
        this.reviews.store(review, metadata);
      tempData.push(placeholder);
    }

    if (saveWaypoints)
      indent = newIndent + 1;
    cursor = nextEnd + review_SUFFIX.length;
  }

  return tempData.length > 0 ?
    tempData.join('') + data.substring(cursor, data.length) :
    data;
};

function restore(context, data, from, isSpecial) {
  var tempData = [];
  var cursor = 0;

  for (; cursor < data.length;) {
    var nextMatch = from.nextMatch(data, cursor);
    if (nextMatch.start < 0)
      break;

    tempData.push(data.substring(cursor, nextMatch.start));
    var review = from.restore(nextMatch.match);

    if (isSpecial && (context.keepAll || (context.keepOne && context.restored === 0))) {
      context.restored++;
      tempData.push(review);

      cursor = nextMatch.end;
    } else {
      cursor = nextMatch.end + (context.keepBreaks && data.substring(nextMatch.end, nextMatch.end + lineBreak.length) == lineBreak ? lineBreak.length : 0);
    }
  }

  return tempData.length > 0 ?
    tempData.join('') + data.substring(cursor, data.length) :
    data;
}

reviewsProcessor.prototype.restore = function (data) {
  data = restore(this, data, this.reviews, false);
  data = restore(this, data, this.specialreviews, true);
  return data;
};

module.exports = reviewsProcessor;
